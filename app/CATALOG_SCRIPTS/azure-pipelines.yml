trigger:
  branches:
    include:
      - dev
  paths:
    exclude:
      - .gitignore
      - pipelines/*
      - README.md

resources:
  repositories:
  - repository: CIT_OI_BuildAgentTemplate
    type: git  
    name: CIT-OI/build-agent
    ref: refs/tags/latest-v4
    endpoint: CIT-ServiceConnection-BuildAgentRepo
#  pipelines:
#  - pipeline: api-dev-release
#    source: "Deliver API Development Image"
#    trigger: true

#parameters:
#  - name: env
#    values:
#      - stage
#      - prod
#    default: stages
  
variables:
  pool: 'CIT-K8s-InitPool'
  container: 'czag02r09aks001acr.azurecr.io/zeissgroup-buildagent-default:20.04'
  # Settings \ Pipelines \ Agent pools \ user previously created kubernetes-based agent pools for this ADO project
  deployPoolAgent: 'CIT-K8s-ZDP_DnA-EDM-Workerpool'
  organization: 'zeissgroup'
  kubernetesServiceConnection: 'ServiceAccount_zeissgroup_build-robot'
  # Settings \ create a new service connection (target_deploy_vms deploy user SSH private key)
  sshServiceConnection: 'EdcDevSshServiceConnection'
  deploymentVM: 'gag02r02vm117'
  deploymentFolder: '/tmp'
  # Release variables
  imageRepository: "edc_api-dev"
  vmImageName: "ubuntu-latest"
  dockerfilePath: "$(Build.SourcesDirectory)/Dockerfile"
  dockerRegistryServiceConnection: "AcrEdmDatacatalogPocServiceConnection"
  releaseTag: "$(Build.SourceVersion)"
  tag: '$(Build.BuildId)'
  dockerRegistryUsername: "RepositoriesAdmin"
  dockerRegistryPassword: "yycKYXYEqssL6DaE5tPJqdi+xWJ8Jxwb1B2cGiKYin+ACRCh0Rlv"

stages:
- template: templates/spin-up-task.yml@CIT_OI_BuildAgentTemplate
  parameters:
    pool: $(pool)
    kubernetesServiceConnection: $(kubernetesServiceConnection)
    buildId: $(Build.BuildId)
    container: $(container)
    deployPoolAgent: $(deployPoolAgent)
    organization: $(organization)

# https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/containers/publish-to-acr?view=azure-devops&tabs=javascript%2Cportal%2Csp
- stage: 'build'
  dependsOn: spin_up
  condition: succeeded()
  displayName: 'Build'
  jobs:
    - job: build_python_docker_push
      displayName: Build and push
      timeoutInMinutes: 0
      pool:
        name: $(deployPoolAgent)
        demands:
        - BUILDID -equals $(Build.BuildId)
      steps:         
        # takes care of authentication to DevOps Artifacts Python package feeds
        # you you can run now pip install "my_secret_package"
        # - task: PipAuthenticate@1
        #   inputs:
        #     artifactFeeds: change_me_repos
        #     onlyAddExtraIndex: true
        #   - bash: |
        #       echo "##vso[task.setvariable variable=artifactoryUrl;]$PIP_EXTRA_INDEX_URL" 
        #       displayName: Export Artifactory URL
        - task: Docker@2
          displayName: Build and publish image to Azure Container Registry
          inputs:
            command: buildAndPush
            repository: $(imageRepository)
            containerRegistry: $(dockerRegistryServiceConnection)
            dockerfile: $(dockerfilePath)
            #arguments: '--build-arg PIP_EXTRA_URL=$(artifactoryUrl) INFA_EDC_AUTH=$(INFA_EDC_AUTH)'
            arguments: '--build-arg INFA_EDC_AUTH=$(INFA_EDC_AUTH)'
            tags: |
              $(tag)
- stage: 'deploy'
  dependsOn: build
  condition: succeeded()
  displayName: 'Deploy'
  jobs:
    - job: deploy_docker_application
      displayName: Deploy Python app on VM
      timeoutInMinutes: 0
      pool:
        name: $(deployPoolAgent)
        demands:
        - BUILDID -equals $(Build.BuildId)
      steps:
        # - task: CopyFilesOverSSH@0
        #   displayName: Copy configuration to target machine
        #   inputs:
        #     sshEndpoint: $(sshServiceConnection)
        #     sourceFolder: '$(Build.SourcesDirectory)/vm/$(deploymentVM)'
        #     contents: '**'
        #     targetFolder: '/opt/$(deploymentFolder)'
        #     overwrite: true
        - task: SSH@0
          displayName: Docker login, pull
          inputs:
            sshEndpoint: $(sshServiceConnection)
            runOptions: 'inline'
            failOnStdErr: false
            inline: |
              docker login datacatalogpoc.azurecr.io --username $(dockerRegistryUsername) --password $(dockerRegistryPassword) 
              docker system prune -a -f 
              docker pull datacatalogpoc.azurecr.io/$(imageRepository):$(tag) 
              docker ps -a | grep devops_lineage | awk '{ print $1 }' | xargs docker stop 
              docker ps -a | grep devops_lineage | awk '{ print $1 }' | xargs docker rm 
              docker run -d --name devops_lineage datacatalogpoc.azurecr.io/$(imageRepository):$(tag) 
              docker ps -a
      
- template: templates/clean-up-task.yml@CIT_OI_BuildAgentTemplate
  parameters:
    pool: $(pool)
    dependsOn: ['deploy']
    kubernetesServiceConnection: $(kubernetesServiceConnection)
    buildId: $(Build.BuildId)